
ARG BUILD_FROM=mcr.microsoft.com/devcontainers/base:debian
FROM $BUILD_FROM

ENV \
    DEBIAN_FRONTEND=noninteractive \
    DEVCONTAINER=1

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

COPY rootfs/usr/bin/* /usr/bin/
COPY rootfs_supervisor/etc/supervisor_scripts/common /etc/supervisor_scripts/

# Create a directory for the app
WORKDIR /usr/src/app

# Copy the application files
COPY public ./public
COPY views ./views
COPY . .
COPY run.sh /app/run.sh


#ENV http_proxy "http://webproxy.merck.com:8080"
#ENV https_proxy "http://webproxy.merck.com:8081"
#ENV no_proxy "localhost,.merck.com,127.0.0.1"

#RUN apk update --no-check-certificate \
#   && apk add --no-check-certificate bash curl

# Update the package list and install tzdata
RUN apt-get update \
    && apt-get install -y tzdata \
    && ln -fs /usr/share/zoneinfo/Europe/Berlin /etc/localtime \
    && dpkg-reconfigure --frontend noninteractive tzdata

# Install Node.js and npm
RUN apt-get install -y nodejs npm

# Clean up to reduce image size
RUN apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set the environment variable for the time zone
ENV TZ=Europe/Berlin

RUN npm install express
RUN npm install os
RUN npm install ejs
RUN npm install path
RUN npm install node-fetch

# Install common
COPY common/install /tmp/common/install

RUN \
    bash devcontainer_init \
    && common_install_packages \
        docker \
        shellcheck \
        cosign \
        os-agent \
    && usermod -aG docker vscode

# Make the script executable
RUN chmod a+x /app/run.sh

EXPOSE 8001

LABEL io.hass.version="VERSION" io.hass.type="addon" io.hass.arch="armhf|aarch64|i386|amd64"

# Run the application
ENTRYPOINT ["/app/run.sh"]
